#
# @brief   User-defined functions for Yocto env
# @version ver.2.0.6
# @date    Sun Feb 11 01:11:47 PM CET 2024
# @company None, free software to use 2024
# @author  Vladimir Roncevic <elektron.ronca@gmail.com>
#

# Yocto helper
function __yocto_helper {
    read -r -d '' END_HELP_TXT <<- END_HELP_TXT
### Get package info (package name)
    package_info

END_HELP_TXT
    echo "$END_HELP_TXT"
}

function __package_info {
    local BB_PATH=$(which bitbake)
    local NUMBER_OF_ARGUMENTS=$#
    local PN=$1
    if [[ ${NUMBER_OF_ARGUMENTS} -ne 1 ]]; then
        printf "%s\n" "Usage: package_info <PKG_NAME>"
        return 127
    fi
    if [[ ! -e ${BB_PATH} ]]; then
        printf "%s\n" "Check is Yocto env sourced"
        exit 128
    fi
    printf "%s\n" "Full package designator"
    bitbake -e ${PN} | grep ^P=
    printf "%s\n" "Package version"
    bitbake -e ${PN} | grep ^PV=
    printf "%s\n" "Package source location"
    bitbake -e ${PN} | grep ^S=
    printf "%s\n" "Package build location"
    bitbake -e ${PN} | grep ^B=
    printf "%s\n" "Package deploy location"
    bitbake -e ${PN} | grep ^D=
    printf "%s\n" "Package Makefile arugments"
    bitbake -e ${PN} | grep ^EXTRA_OEMAKE=
    printf "%s\n" "Package CMake arguments"
    bitbake -e ${PN} | grep ^EXTRA_OECMAKE=
    printf "%s\n" "Package autoreconfigure arguments"
    bitbake -e ${PN} | grep ^EXTRA_AUTORECONF=
    printf "%s\n" "Package configure arguments"
    bitbake -e ${PN} | grep ^EXTRA_OECONF=
}

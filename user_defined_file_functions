#
# @brief   User-defined functions for file operations
# @version ver.2.1.6
# @date    Sun Jun  2 04:00:51 PM CEST 2024
# @company None, free software to use 2024
# @author  Vladimir Roncevic <elektron.ronca@gmail.com>
#

# File IO helper
function __file_io_helper {
    read -r -d '' END_HELP_TXT <<- END_HELP_TXT
### Create and move work directory (provide path)
    mkdir_cd project_demo

### List files and directories by size (provide path and max size)
    list_all_by_size ../ 10M

### List files that are not modified in the last days (provide path and days)
    last_modified ../ 2

### List files by name and size (provide path, filename and size)
    list_files_size ../ *.so 2M

### Remove files by name and size (provide path, filename and size)
    remove_files_by_size ../ *.so 2M

### Count duplicates (provide path)
    count_duplicates ../

### Display n-st field from a column delimited file (provide columns and file)
    cut_columns_from_file 1,3,5 file.ini"

### Display characters of every line in a file (provide columns and file)
    cut_chars_from_file 1-8 test.txt

### Number of lines per file (no arguments)
    lines_number_per_file

### Check file sizes (no arguments)
    check_sizes

### Clang format cc and h modules (no arguments)
    clang_format

### Find and list last modifications (provide path)
    last_modifications ../

### Count files (no arguments)
    count_files

### Count words in file (provide word and filename)
    count_words_in_file connected alerts.log

END_HELP_TXT
    echo "$END_HELP_TXT"
}

# Create and move work directory
function __mkdir_cd {
    local number_of_arguments=$# dir_path=$1
    if [[ ${number_of_arguments} -ne 1 ]]; then
        printf "%s\n" "Usage: mkdir_cd <directory_path>"
        return 127
    fi
    mkdir "${dir_path}/"
    cd "${dir_path}/"
    return $?
}

# List files and directories by size
function __list_all_by_size {
    local number_of_arguments=$# target_path=$1 max_size=$2
    if [[ ${number_of_arguments} -ne 2 ]]; then
        printf "%s\n" "Usage: list_all_by_size <path> <max_size>"
        return 127
    fi
    if [[ ! -e ${target_path} ]]; then
        printf "%s\n" "Check path [${target_path}]"
        return 128
    fi
    eval "find ${target_path} -type f -size ${max_size}"
    return $?
}

# List files that are not modified in the last days
function __last_modified {
    local number_of_arguments=$# target_path=$1 last_days=$2
    if [[ ${number_of_arguments} -ne 2 ]]; then
        printf "%s\n" "Usage: last_modified <PATH> <last_days>"
        return 127
    fi
    if [[ ! -e ${target_path} ]]; then
        printf "%s\n" "Check path [${target_path}]"
        return 128
    fi
    eval "find ${target_path} -mtime ${last_days}"
    return $?
}

# List files by name and size
function __list_files_size {
    local number_of_arguments=$# target_path=$1 fname=$2 size=$3
    if [[ ${number_of_arguments} -ne 3 ]]; then
        echo "Usage: list_files_size <path> <filename> <size>"
        return 127
    fi
    if [[ ! -e ${target_path} ]]; then
        printf "%s\n" "Check path [${target_path}]"
        return 128
    fi
    find ${target_path} -type f -name ${fname} -size ${size} -exec ls -l {}\;
    return $?
}

# Remove files by name and size
function __remove_files_by_size {
    local number_of_arguments=$# target_path=$1 fname=$2 size=$3
    if [[ ${number_of_arguments} -ne 3 ]]; then
        echo "Usage: remove_files_by_size <path> <filename> <size>"
        return 127
    fi
    if [[ ! -e ${target_path} ]]; then
        printf "%s\n" "Check path [${target_path}]"
        return 128
    fi
    find ${target_path} -type f -name ${fname} -size ${size} -exec rm -f {}\;
    return $?
}

# Count duplicates
function __count_duplicates {
    local number_of_arguments=$# path=$1
    if [[ ${number_of_arguments} -ne 1 ]]; then
        printf "%s\n" "Usage: count_duplicates <path>"
        return 127
    fi
    if [[ ! -e ${path} ]]; then
        printf "%s\n" "Check path [${path}]"
        return 128
    fi
    sort ${path} | uniq -c
    return $?
}

# Display n-st field from a column delimited file
function __cut_columns_from_file {
    local number_of_arguments=$# columns=$1 filename=$2
    if [[ ${number_of_arguments} -ne 2 ]]; then
        printf "%s\n" "Usage: cut_columns_from_file <columns> <filename>"
        return 127
    fi
    if [[ ! -e ${filename} ]]; then
        printf "%s\n" "Check file [${filename}]"
        return 128
    fi
    cut -d: -f ${columns} ${filename}
    return $?
}

# Display characters of every line in a file
function __cut_chars_from_file {
    local number_of_arguments=$# chars=$1 filename=$2
    if [[ ${number_of_arguments} -ne 2 ]]; then
        printf "%s\n" "Usage: cut_chars_from_file <columns> <filename>"
        printf "%s\n" "Ex: cut_chars_from_file 1-8 test.txt"
        return 127
    fi
    if [[ ! -e ${filename} ]]; then
        printf "%s\n" "Check file [${filename}]"
        return 128
    fi
    eval "cut -c ${chars} ${filename}"
    return $?
}

# Number of lines per file
function __lines_number_per_file {
    find . -type f -exec wc -l '{}' \;
    return $?
}

# Check file sizes
function __check_sizes {
    du -H --human-readable
    return $?
}

# Format cc and h modules
function __clang_format {
    local file_extensions="-name \"*.cc\" -o -name \"*.h\""
    local clang_params="clang-format-15 -style=file:.clang-format -i {}"
    eval "find . ${file_extensions} | xargs -I {} ${clang_params}"
    return $?
}

# Find and list last modifications
function __last_modifications {
    local number_of_arguments=$# path=$1
    if [[ ${number_of_arguments} -ne 1 ]]; then
        printf "%s\n" "Usage: last_modifications <path>"
        return 127
    fi
    local stat_params="stat --format '%Y :%y %n'"
    local sort_params="| sort -nr | cut -d: -f2- | head"
    eval "find ${path} -type f -exec ${stat_params} "{}" \; ${sort_params}"
    return $?
}

# Count files
function __count_files {
    find . -maxdepth 1 -type d | while read -r dir; do
        printf "%s:\t" "$dir"
        find "$dir" -type f | wc -l
    done
    return $?
}

# Count words in file
function __count_words_in_file {
    local number_of_arguments=$# word=$1 filename=$2
    if [[ ${number_of_arguments} -ne 2 ]]; then
        printf "%s\n" "Usage: count_words_in_file <word> <filename>"
        return 127
    fi
    if [[ ! -e ${filename} ]]; then
        printf "%s\n" "Check file [${filename}]"
        return 128
    fi
    grep -o ${word} ${filename} | wc -l
    return $?
}

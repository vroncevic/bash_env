#
# @brief   User-defined functions for file operations
# @version ver.1.8.5
# @date    Sun 13 Feb 2022 10:52:42 AM CET
# @company None, free software to use 2022
# @author  Vladimir Roncevic <elektron.ronca@gmail.com>
#

# File IO helper
function __file_io_helper {
    read -r -d '' END_HELP_TXT <<- END_HELP_TXT
### Create and move work directory (provide path)
    mkdir_cd

### List files and directories by size (provide path and max size)
    list_all_by_size

### List files that are not modified in the last days (provide path and days)
    last_modified

### List files by name and size (provide path, filename and size)
    list_files_size

### Remove files by name and size (provide path, filename and size)
    emove_files_by_size

### Count duplicates (provide path)
    count_duplicates

### Display n-st field from a column delimited file (provide columns and file)
    cut_columns_from_file

### Display characters of every line in a file (provide columns and file)
    cut_chars_from_file

### Number of lines per file (no arguments)
    lines_number_per_file

### Check file sizes (no arguments)
    check_sizes

### Clang format cc and h modules (no arguments)
    clang_format

### Find and list last modifications (path)
    last_modifications

END_HELP_TXT
    echo "$END_HELP_TXT"
}

# Create and move work directory
function __mkdir_cd {
    local NUMBER_OF_ARGUMENTS=$# DIR_PATH=$1
    if [[ ${NUMBER_OF_ARGUMENTS} -ne 1 ]]; then
        printf "%s\n" "Usage: mkdir_cd <DIRECTORY_PATH>"
        return 127
    fi
    mkdir "${DIR_PATH}/"
    cd "${DIR_PATH}/"
    return 0
}

# List files and directories by size
function __list_all_by_size {
    local NUMBER_OF_ARGUMENTS=$# TARGET_PATH=$1 MAX_SIZE=$2
    if [[ ${NUMBER_OF_ARGUMENTS} -ne 2 ]]; then
        printf "%s\n" "Usage: list_all_by_size <PATH> <SIZE_MAX>"
        return 127
    fi
    if [[ ! -e ${TARGET_PATH} ]]; then
        printf "%s\n" "Check path [${TARGET_PATH}]"
        return 128
    fi
    eval "find ${TARGET_PATH} -type f -size ${MAX_SIZE}"
    return 0
}

# List files that are not modified in the last days
function __last_modified {
    local NUMBER_OF_ARGUMENTS=$# TARGET_PATH=$1 LAST_DAYS=$2
    if [[ ${NUMBER_OF_ARGUMENTS} -ne 2 ]]; then
        printf "%s\n" "Usage: last_modified <PATH> <LAST_DAYS>"
        return 127
    fi
    if [[ ! -e ${TARGET_PATH} ]]; then
        printf "%s\n" "Check path [${TARGET_PATH}]"
        return 128
    fi
    eval "find ${TARGET_PATH} -mtime ${LAST_DAYS}"
    return 0
}

# List files by name and size
function __list_files_size {
    local NUMBER_OF_ARGUMENTS=$# TARGET_PATH=$1 FNAME=$2 SIZE=$3
    if [[ ${NUMBER_OF_ARGUMENTS} -ne 3 ]]; then
        echo "Usage: list_files_size <PATH> <FILENAME> <SIZE>"
        return 127
    fi
    if [[ ! -e ${TARGET_PATH} ]]; then
        printf "%s\n" "Check path [${TARGET_PATH}]"
        return 128
    fi
    find ${TARGET_PATH} -type f -name ${FNAME} -size ${SIZE} -exec ls -l {}\;
    return 0
}

# Remove files by name and size
function __remove_files_by_size {
    local NUMBER_OF_ARGUMENTS=$# TARGET_PATH=$1 FNAME=$2 SIZE=$3
    if [[ ${NUMBER_OF_ARGUMENTS} -ne 3 ]]; then
        echo "Usage: remove_files_by_size <PATH> <FILENAME> <SIZE>"
        return 127
    fi
    if [[ ! -e ${TARGET_PATH} ]]; then
        printf "%s\n" "Check path [${TARGET_PATH}]"
        return 128
    fi
    find ${TARGET_PATH} -type f -name ${FNAME} -size ${SIZE} -exec rm -f {}\;
    return 0
}

# Count duplicates
function __count_duplicates {
    local NUMBER_OF_ARGUMENTS=$# PATH=$1
    if [[ ${NUMBER_OF_ARGUMENTS} -ne 1 ]]; then
        printf "%s\n" "Usage: count_duplicates <PATH>"
        return 127
    fi
    if [[ ! -e ${PATH} ]]; then
        printf "%s\n" "Check path [${PATH}]"
        return 128
    fi
    sort ${PATH} | uniq -c
    return 0
}

# Display n-st field from a column delimited file
function __cut_columns_from_file {
    local NUMBER_OF_ARGUMENTS=$# COLUMNS=$1 FILENAME=$2
    if [[ ${NUMBER_OF_ARGUMENTS} -ne 2 ]]; then
        printf "%s\n" "Usage: cut_columns_from_file <COLUMNS> <FILENAME>"
        printf "%s\n" "Example: cutcol 1,3,5 file.ini"
        return 127
    fi
    if [[ ! -e ${FILENAME} ]]; then
        printf "%s\n" "Check file [${FILENAME}]"
        return 128
    fi
    cut -d: -f ${COLUMNS} ${FILENAME}
    return 0
}

# Display characters of every line in a file
function __cut_chars_from_file {
    local NUMBER_OF_ARGUMENTS=$# CHARS=$1 FILENAME=$2
    if [[ ${NUMBER_OF_ARGUMENTS} -ne 2 ]]; then
        printf "%s\n" "Usage: cut_chars_from_file <COLUMNS> <FILENAME>"
        printf "%s\n" "Ex: cut_chars_from_file 1-8 test.txt"
        return 127
    fi
    if [[ ! -e ${FILENAME} ]]; then
        printf "%s\n" "Check file [${FILENAME}]"
        return 128
    fi
    eval "cut -c ${CHARS} ${FILENAME}"
    return 0
}

# Number of lines per file
function __lines_number_per_file {
    find . -type f -exec wc -l '{}' \;
    return 0
}

# Check file sizes
function __check_sizes {
    du -H --human-readable
    return 0
}

# Format cc and h modules
function __clang_format {
    local FILE_EXTENSIONS="-name \"*.cc\" -o -name \"*.h\""
    local CLANG="clang-format-15 -style=file:.clang-format -i {}"
    eval "find . ${FILE_EXTENSIONS} | xargs -I {} ${CLANG}"
}

# Find and list last modifications
function __last_modifications {
    local NUMBER_OF_ARGUMENTS=$# PATH=$1
    if [[ ${NUMBER_OF_ARGUMENTS} -ne 1 ]]; then
        printf "%s\n" "Usage: last_modifications <PATH>"
        return 127
    fi
    local STAT="stat --format '%Y :%y %n'"
    local SORT="| sort -nr | cut -d: -f2- | head"
    eval "find ${PATH} -type f -exec ${STAT} "{}" \; ${SORT}"
}

#
# @brief   Common user-defined functions
# @version ver.1.8.5
# @date    Sun 13 Feb 2022 10:52:42 AM CET
# @company None, free software to use 2022
# @author  Vladimir Roncevic <elektron.ronca@gmail.com>
#

# Common helper
function __common_helper {
    read -r -d '' END_HELP_TXT <<- END_HELP_TXT
### Check shared library (provide path of shared library)
    so_version

### List process details by name (provide process name)
    list_processes

### Connect time for a specific user (provide username)
    connect_time_user

### Kill all processes for user (provide username)
    kill_all_by_user

### Archiving files: *.tar (provide path and filename)
    archiving_tar

### Archiving files: *.tar.gz (provide path, filename and arhive name)
    archiving_gz

### Backup sync (provide path)
    backup_sync

### df with type of file systems (no arguments)
    df_type

### Watch activities (no arguments)
    watch_activities

END_HELP_TXT
    echo "$END_HELP_TXT"
}

# Check shared library
function __so_version {
    local SO_FILE=$1
    local NUMBER_OF_ARGUMENTS=$#
    if [[ ${NUMBER_OF_ARGUMENTS} -ne 1 ]]; then
        printf "%s\n" "Usage: so_version <SHARED_LIBRARY>"
        return 127
    fi
    if [[ ! -e ${SO_FILE} ]]; then
        printf "%s\n" "Check shared library ${SO_FILE}"
        return 128
    fi
    ldconfig -v ${SO_FILE}
}

# List process details by name
function __list_processes {
    local NUMBER_OF_ARGUMENTS=$# APP_NAME=$1
    if [[ ${NUMBER_OF_ARGUMENTS} -ne 1 ]]; then
        printf "%s\n" "Usage: list_processes <PROCESS_NAME>"
        return 127
    fi
    eval "ps ax | grep ${APP_NAME}"
    return 0
}

# Connect time for a specific user
function __connect_time_user {
    local NUMBER_OF_ARGUMENTS=$# USERNAME=$1 AC_PATH=$(which ac)
    if [[ ${NUMBER_OF_ARGUMENTS} -ne 1 ]]; then
        printf "%s\n" "Usage: connect_time_user <USERNAME>"
        return 127
    fi
    if [[ ! -e ${AC_PATH} ]]; then
        printf "%s\n" "Check tool ac"
        printf "%s\n" "If missing, run apt-get install acct"
        return 128
    fi
    eval "${AC_PATH} -d ${USERNAME}"
    return 0
}

# Kill all processes for user
function __kill_all_by_user {
    local NUMBER_OF_ARGUMENTS=$# USERNAME=$1
    if [[ ${NUMBER_OF_ARGUMENTS} -ne 1 ]]; then
        printf "%s\n" "Usage: kill_all_by_user <USERNAME>"
        return 127
    fi
    ps -ef | grep $USERNAME | awk '{ print $2 }' | xargs kill -9
    return 0
}

# Archiving files: *.tar
function __archiving_tar {
    local NUMBER_OF_ARGUMENTS=$# PATH=$1 FILENAME=$2
    if [[ ${NUMBER_OF_ARGUMENTS} -ne 2 ]]; then
        printf "%s\n" "Usage: archiving_tar <PATH> <FILENAME>"
        return 127
    fi
    if [[ ! -e ${PATH} ]]; then
        printf "%s\n" "Check path [${PATH}]"
        return 128
    fi
    FIND_PIPE="find ${PATH} -type f -name ${FILENAME}"
    XARGS_PIPE="xargs tar -cvf ${PATH}/${FILENAME}`date '+%d%m%Y'_archive.tar`"
    eval "${FIND_PIPE} | ${XARGS_PIPE}"
    return 0
}

# Archiving files: *.tar.gz
function __archiving_gz {
    local NUMBER_OF_ARGUMENTS=$# PATH=$1 FILENAME=$2 ARCH=$3
    if [[ ${NUMBER_OF_ARGUMENTS} -ne 3 ]]; then
        printf "%s\n" "Usage: archiving_gz <PATH> <FILENAME> <ARCHIVE_NAME>"
        return 127
    fi
    if [[ ! -e ${PATH} ]]; then
        printf "%s\n" "Check path [${PATH}]"
        return 128
    fi
    FIND_PIPE="find ${PATH} -name ${FILENAME} -type f -print"
    XARGS_PIPE="xargs tar -cvzf ${ARCH}.tar.gz"
    eval "${FIND_PIPE} | ${XARGS_PIPE}"
    return 0
}

# Backup sync
function __backup_sync {
    local BACKUP_DESTINATION=$1
    local NUMBER_OF_ARGUMENTS=$#
    if [[ ${NUMBER_OF_ARGUMENTS} -ne 1 ]]; then
        printf "%s\n" "Usage: backup_sync <BACKUP_DESTINATION_PATH>"
        return 127
    fi
    if [[ ! -e ${BACKUP_DESTINATION} ]]; then
        printf "%s\n" "Check destination path ${BACKUP_DESTINATION}"
        return 128
    fi
    eval "rsync -avu --delete /data/ ${BACKUP_DESTINATION}"
    return 0
}

# df with type of file systems
function __df_type {
    df -TPh
}

# Watch activities
function __watch_activities {
    watch -n 1 w -hs
}

# Watch time
function __watch_time {
    watch "cat /proc/timer_list | sort -nr | head -n 20"
}

